<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<title>
			{{title|default(appName)}}
		</title>
		<link href="https://fonts.googleapis.com/css2?family=Montserrat+Alternates:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="{{basePath}}\public\assets\css\custom.css">
		<link rel="stylesheet" href="{{basePath}}\public\assets\css\styles.css">
		<link href="https://cdn.datatables.net/v/dt/jszip-3.10.1/dt-2.3.2/b-3.2.3/b-colvis-3.2.3/b-html5-3.2.3/b-print-3.2.3/r-3.0.4/datatables.min.css" rel="stylesheet" integrity="sha384-Uih/K/Uil6Rus8l+PLDmE3bb4MDKCk8tU9+YORDUzpn1jE0EUge4uNFYXM4Hj8TG" crossorigin="anonymous">
		<style>
			body {
				margin: 0;
			}
			.page-wrapper {
				display: flex;
				flex: 1 1 auto;
				/*min-height: 0;*/
			}
			aside {
				width: 220px;
				background: #23272b;
				color: #ffffff;
				padding: 20px 0;
				height: auto;
				flex-shrink: 0;
				display: flex;
				flex-direction: column;
			}
			main .container {
				flex: 1 1 auto;
			}
		</style>
	</head>
	<body>
		<header>
			<nav class="navbar">
				<div class="navbar-brand d-flex align-items-center">
					<a href="{{basePath}}/admin"><img src="{{basePath}}\public\assets\img\logo_blanco.png" alt="{{appName}}" height="50" class="d-inline-block align-text-top"></a>
					<a class="mx-2" href="{{basePath}}/admin">Administrador</a>
				</div>
			</nav>
		</header>
		<div class="page-wrapper">
			{% block aside %}
				{% include "Admin/aside.twig" %}
			{% endblock %}
			<main class="container"> {% block content %}{% endblock %}
				</main>
			</div>
			<!---<footer>
									            <p>&copy;
									                {{ "now"|date("Y") }}
									                {{appName}}. Todos los derechos reservados. Autor
									                {{appAuthor}}
									            </p>
									        </footer>-->
		</body>
		 <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/js/bootstrap.bundle.min.js"></script>
		 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
		 <script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>
		 <script src="https://cdnjs.cloudflare.com/ajax/libs/zepto/1.2.0/zepto.min.js"></script>
		 <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/pdfmake.min.js"></script>
		 <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.2.7/vfs_fonts.js" ></script>
		 <script src="https://cdn.datatables.net/v/dt/jszip-3.10.1/dt-2.3.2/b-3.2.3/b-colvis-3.2.3/b-html5-3.2.3/b-print-3.2.3/r-3.0.4/datatables.min.js"></script>
		 <script>
			$(document).ready(function() {
				$('.button .query').on('click', function(e) {
					e.preventDefault();
					let route = $(this).data('id');
					let url = '{{ basePath }}/api/admin/'+route;
					let type = $(this).data('type') || 'GET';
					$.ajax({
						url: url,
						type: 'POST',
						dataType: 'json',
						success: function(res) {
							/*//obtener id #main-content borrar contenido actual
							$('#main-content').empty();
							//agregar contenido de la respuesta
							$('#main-content').html(res.content);*/
						},
						error: function(res) {
							Swal.fire({
								title: 'Error',
								text: 'No se pudo obtener los datos del administrador.',
								icon: 'error',
								confirmButtonText: 'Cerrar'
							});
						}
					});
				});
			});
		
			function showAlert(message, type = 'info') {
				Swal.fire({
					icon: type,
					title: message,
					showConfirmButton: true,
					timer: 3000
				});
			}
		
			function showToast(message, type = 'info') {
				const Toast = Swal.mixin({
					toast: true,
					position: 'top-end',
					showConfirmButton: false,
					timer: 3000,
					timerProgressBar: true,
					didOpen: (toast) => {
						toast.onmouseenter = Swal.stopTimer;
						toast.onmouseleave = Swal.resumeTimer;
					}
				});
				Toast.fire({
					icon: type,
					title: message
				});
			}
		
			function showConfirm(message, callback) {
				Swal.fire({
					title: 'Confirmar',
					text: message,
					icon: 'warning',
					showCancelButton: true,
					confirmButtonText: 'S√≠',
					cancelButtonText: 'No'
				}).then((result) => {
					if (result.isConfirmed) {
						callback();
					}
				});
			}
		
			function createDatatable(selector, options = {}) {
				const defaultOptions = {
					language: {
						url: '{{ basePath }}/public/assets/js/es-ES.json'
					},
					searching: false,
					search: { "caseInsensitive": true },
					pageLength: 5,
					lengthChange: false,
					order: [[0, 'desc']]  // Descomentar si se quiere ordenar por la primera columna de manera descendente
					//ordenar de manera descendente por la primera columna
				};
				const dtOptions = $.extend(true, {}, defaultOptions, options);
				return $(selector).DataTable(dtOptions);
			}
		
			function createDatatableWithAjax(selector, ajaxUrl, options =['edit','view','remove']) {
				$.ajax({
					url: ajaxUrl,
					method: 'GET',
					dataType: 'json',
					success: function (res) {
						data = res.data;
						const columnas = Object.keys(data[0]).map(key => ({
						title: key.charAt(0).toUpperCase() + key.slice(1),
						data: key
						}));
						
						columnas.push({
							data: null,
							orderable: false,
							searchable: false,
							render: function(data, type, row) {
								let actions = '';
								if (options.includes('view')) {
									actions += `<a class="btn btn-sm btn-secondary" data-bs-action="view">üîç</a> `;
								}
								if (options.includes('edit')) {
									actions += `<a class="btn btn-sm btn-secondary" data-bs-action="edit">‚úèÔ∏è</a> `;
								}
								if (options.includes('remove')) {
									actions += `<a class="btn btn-sm btn-danger" data-bs-action="remove">üóëÔ∏è</a>`;
								}
								return actions;
							}
						});
						/*
						*/
						const defaultOptions = {
							//data: data,
							ajax: {
								type: 'GET',
								url: ajaxUrl,
								dataSrc: 'data'
							},
							columns: columnas,
							language: {
								url: '{{ basePath }}/public/assets/js/es-ES.json'
							},
							searching: false,
							search: { "caseInsensitive": true },
							pageLength: 5,
							order: [[0, 'desc']],
							lengthChange: false,
							select: true
							/*dom: 'Bfrtip',
							buttons: [
								{
								text: 'üîÑ Actualizar',
								action: function (e, dt, node, config) {
									dt.ajax.reload(null, false);
								}
								}
							],*/
							}
						return $(selector).DataTable(defaultOptions)
					},
					error: function (xhr, status, error) {
						showAlert('Error al cargar los datos', 'error');
					}
				});
			}
			
			function retrieveDataById(id, url, callback) {
				let result = null;
				$.ajax({
					url: `${url}/${id}`,
					type: 'GET',
					dataType: 'json',
					async: false,
					success: function(res) {
						let data = res.data;
						result = data;
						if (typeof callback === 'function') {
							callback(data);
						}
					},
					error: function(xhr, status, error) {
						showAlert('Error al obtener los datos: ' + (xhr.responseJSON?.message || 'Error desconocido'), 'error');
					}
				});
				return result;
			}

			function onclicView(callback){
				$(document).on('click', 'a[data-bs-action="view"]', function(e) {
					e.preventDefault();
					let row = $(this).closest('tr');
					let id = row.find('td:first').text();
					if (typeof callback === 'function') {
						callback(id);
					} else {
						window.location.href = `{{basePath}}/admin/categories/${id}`;
					}
				});
			}

			function createFormModal(data, method, action, modalForm="#modalForm") {
				let modal = $(modalForm);
				let form = modal.find('form');
				if (form.length === 0) {
					form = $('<form></form>').attr('method', method).attr('action', action);
					modal.append(form);
				} else {
					form.attr('method', method).attr('action', action);
					form.empty();
				}

				let modalContent = $('<div class="modal-content"></div>');
				let modalHeader = $('<div class="modal-header"></div>');
				let title = '';
				if (method === 'GET') {
					title = 'Ver';
				} else if (method === 'PATCH') {
					title = 'Editar';
				} else if (method === 'DELETE') {
					title = 'Eliminar';
				} else {
					title = 'Nuevo';
				}
				modalHeader.append('<h5 class="modal-title">' + title + '</h5>');
				modalHeader.append('<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>');
				modalContent.append(modalHeader);

				let modalBody = $('<div class="modal-body"></div>');
				if (method === 'DELETE') {
					modalBody.append('<p>¬øEst√° seguro de que desea eliminar este registro?</p>');
				} else {
					data.forEach(function(field) {
						let fieldDiv = $('<div class="mb-3"></div>');
						let inputType = field.input || 'text';
						let label = $('<label class="form-label"></label>').attr('for', field.key).text(field.key.charAt(0).toUpperCase() + field.key.slice(1));
						let input;

						let attrs = {};
						if (field.validations) {
							if (field.validations.required) attrs.required = true;
							if (field.validations.min !== undefined) attrs.min = field.validations.min;
							if (field.validations.max !== undefined) attrs.max = field.validations.max;
							if (field.validations.minLength !== undefined) attrs.minlength = field.validations.minLength;
							if (field.validations.maxLength !== undefined) attrs.maxlength = field.validations.maxLength;
							//agregar step
							if (field.validations.step !== undefined) attrs.step = field.validations.step;
							if (field.validations.maxSizeMB !== undefined && inputType === 'file') attrs['data-max-size'] = field.validations.maxSizeMB * 1024 * 1024;
							if (field.validations.fileType && inputType === 'file') attrs.accept = field.validations.fileType.map(ext => '.' + ext).join(',');
						}

						if (inputType === 'hidden') {
							input = $('<input type="hidden">').attr('name', field.key).attr('id', field.key).val(field.value);
							fieldDiv.append(input);
						} else if (inputType === 'textarea') {
							input = $('<textarea class="form-control"></textarea>').attr('name', field.key).attr('id', field.key).val(field.value);
							Object.entries(attrs).forEach(([k, v]) => input.attr(k, v));
							if (method === 'GET' || method === 'DELETE') input.prop('readonly', true);
							fieldDiv.append(label).append(input);
						} else if (inputType === 'select') {
							input = $('<select class="form-select"></select>').attr('name', field.key).attr('id', field.key);
							Object.entries(attrs).forEach(([k, v]) => input.attr(k, v));
							if (Array.isArray(field.options)) {
								field.options.forEach(function(opt) {
									let option = $('<option></option>').attr('value', opt.value).text(opt.label);
									if (String(opt.value) === String(field.value)) option.attr('selected', true);
									input.append(option);
								});
							}
							if (method === 'GET' || method === 'DELETE') input.prop('disabled', true);
							fieldDiv.append(label).append(input);
						} else 
						if (inputType === 'file') {
							input = $('<input type="file" class="form-control">').attr('name', field.key).attr('id', field.key);
							Object.entries(attrs).forEach(([k, v]) => input.attr(k, v));
							if (method === 'GET' || method === 'DELETE') input.prop('disabled', true);
							fieldDiv.append(label).append(input);
							if (field.value && typeof field.value === 'string' && field.value.length > 0) {
								let imgPreview = $('<img class="img-thumbnail mt-2" style="max-width:120px;max-height:120px;">').attr('src', "{{ picturePath }}/"+field.value);
								fieldDiv.append(imgPreview);
								//desactivar el required si es EDIT
								if (method === 'PATCH') {
									input.removeAttr('required');
								}
							}
						} 
						else {
							input = $('<input class="form-control">').attr('type', inputType).attr('name', field.key).attr('id', field.key).val(field.value);
							Object.entries(attrs).forEach(([k, v]) => input.attr(k, v));
							if (method === 'GET' || method === 'DELETE') input.prop('readonly', true);
							fieldDiv.append(label).append(input);
						}
						modalBody.append(fieldDiv);
					});
				}
				modalContent.append(modalBody);

				let modalFooter = $('<div class="modal-footer"></div>');
				if (method === 'GET') {
					modalFooter.append('<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>');
				} else if (method === 'PATCH') {
					modalFooter.append('<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>');
					modalFooter.append('<button type="submit" class="btn btn-primary">Guardar</button>');
				} else if (method === 'DELETE') {
					modalFooter.append('<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>');
					modalFooter.append('<button type="submit" class="btn btn-danger">Eliminar</button>');
				} else {
					modalFooter.append('<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>');
					modalFooter.append('<button type="submit" class="btn btn-primary">Guardar</button>');
				}
				modalContent.append(modalFooter);
				form.append(modalContent);
				return modal;
			}
		
			function handleAjaxFormSubmit(formSelector, onSuccess=null, onError=null) {
				$(formSelector).on('submit', function(e) {
					e.preventDefault();
		
					let form = this;
					const action = $(form).attr('action');
					const method = $(form).attr('method').toUpperCase();
					let formData, ajaxSettings;
					if (method === 'PATCH') {
						let formDataObj = {};
						formData = new FormData(form);
						$(form).serializeArray().forEach(function(item) {
							formDataObj[item.name] = item.value;
						});
						
						ajaxSettings = {
							url: action,
							type: method,
							data: formData,
							contentType: false,
							processData: false,
						};
					} else {
						formData = new FormData(form);
						ajaxSettings = {
							url: action,
							type: method,
							data: formData,
							processData: false,
							contentType: false,
							dataType: 'json'
						};
					}
		
					showConfirm('¬øEst√° seguro de que desea continuar?', function() {
						$.ajax({
							...ajaxSettings,
							success: function(data) {
								try{
									if (data.success) {
										// Cierra el modal si existe
										var modalEl = $(form).closest('.modal')[0];
										if (modalEl) {
											var modal = bootstrap.Modal.getInstance(modalEl);
											if (modal) modal.hide();
										}
										form.reset();
										if (typeof onSuccess === 'function') {
											onSuccess(data);
										}
										showToast('Operaci√≥n exitosa', 'success');
									} else {
										showAlert('Error: ' + (data.message || 'Error desconocido'), 'error');
									}
								}catch (e) {
									console.error('Error processing response:', e);
									showAlert('Error procesando la respuesta', 'error');
								}
		
							},
							error: function(e) {
								let r = e.responseJSON || {};
								if (typeof onError === 'function') {
									onError(r, form);
								}
								showAlert('Error: ' + (r.message || 'Error desconocido'), 'error');
							}
						});
					});
				});
			}
		</script>{% block scripts %}
	{% endblock %}
</html></script></html>
